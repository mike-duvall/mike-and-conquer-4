


Next steps
***************
	* Basic enemey AI
		* Have computer sleep for set time then attack
			X * Write failing test, where GDI doesn't attack
			X * Make test pass
			* Do Mission Failed if NOD minigunner kills GDI
----->			* Write test that detects Mission Failed vs Mission Accomplished
			* Make running of all tests at once work
				* Add ability to reset game between tests
		* Refactor and cleanup	
			* Consider delgating behavior to a MinigunnerController
			Which has PlayerControlled vs ComputerControlled
			* Make ComputerControlled have multiple states

		* Merge mike-and-conquer-4 and mike-and-conquer-test branches
	

Backlog
********
********

	* Refactor - put files in subdirectories.  Example - all game states in gamestate directory

	* Features
		* Make game end after killing NOD minigunner
			* Make game end after GDI minigunner is killed
		* Have computer randomly move NOD minigunner and attack
		* Add barracks for both sides
		* Make barracks able to generate minigunners
			* Add toolbar with minigunner on it
			* Build minigunner when clicked
		* Make computer controller continually spit out minigunners and have them attack

	* Refactoring

		* Group files in subclasses or packages or namespaces
			* Research current C++ standards for this
		* Revisit what claases snould handle mapping ShpFile to textures
		* Make Minigunner class not create new ShpFile instances every time.  Initialize ShpFile instances up front,
		  use same one over and over

		* Grouping ShpFile images into animation sequences
		* Other thoughts
			* GameSprite should have work with a single texture with all it's sprite images on it
			* GameSprite should not know about ShpFile.  The interface when instantiating GameSprite should
			just be the sprite sheet image from above
			* Create class that is responsible for parsing Shpfile into a single sprite sheet

		* See if animation sequences are coded in INI files in original C&C

	* Misc
		 * Consider if clicking an enemy unit that is out of range is:
			* One command (MoveToEnemeyAndAttack)
			vs
			* Two commands
				1.  MoveToEnemy
				2.  Attack
		* Consider if MoveToEnemy is a separate thing from MoveToLocation
		* MoveToLocation, the location never changes, but an enemy location could change
