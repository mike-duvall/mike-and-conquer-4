


Next steps
***************
	* Add multiple GDI minigunners
		* Allow multi select and move or attack
	* Add multiple NOD minigunners
		* Have each NOD minigunner select and attack random GDI minigunner

	

Backlog
********
********

	* Features
		* Make game end after killing NOD minigunner
			* Make game end after GDI minigunner is killed
		* Have computer randomly move NOD minigunner and attack
		* Add barracks for both sides
		* Make barracks able to generate minigunners
			* Add toolbar with minigunner on it
			* Build minigunner when clicked
		* Make computer controller continually spit out minigunners and have them attack

	* Refactoring

		* Revisit directory structure.  Top level code "packages" are at same level as things like "Debug", "assets", and mike-and-conquer-lib and test
		* Reduce duplication between MissionAccomplishedGameState and MissionFailedGameState

		* Revisit having processing of external test events return a new game state.
			* Seems a little awkward:
				* Only one event returns a new state
				* Processing code checks and sets the new state to the first one that returned a new state
		* Group files in subclasses or packages or namespaces
			* Research current C++ standards for this
		* Revisit what claases snould handle mapping ShpFile to textures
		* Make Minigunner class not create new ShpFile instances every time.  Initialize ShpFile instances up front,
		  use same one over and over

		* Grouping ShpFile images into animation sequences
		* Other thoughts
			* GameSprite should have work with a single texture with all it's sprite images on it
			* GameSprite should not know about ShpFile.  The interface when instantiating GameSprite should
			just be the sprite sheet image from above
			* Create class that is responsible for parsing Shpfile into a single sprite sheet

		* See if animation sequences are coded in INI files in original C&C

	* Misc
		 * Consider if clicking an enemy unit that is out of range is:
			* One command (MoveToEnemeyAndAttack)
			vs
			* Two commands
				1.  MoveToEnemy
				2.  Attack
		* Consider if MoveToEnemy is a separate thing from MoveToLocation
		* MoveToLocation, the location never changes, but an enemy location could change
